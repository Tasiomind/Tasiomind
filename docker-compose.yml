version: '3.8'

services:
    postgresdb:
        container_name: postgresdb
        image: postgres:latest
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGDATA: /data/postgres
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - '5432:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
            interval: 10s
            timeout: 5s
            retries: 5

    # create mongodb
    mongodb:
        container_name: mongodb
        image: mongo:latest
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
            MONGO_INITDB_DATABASE: ${MONGO_DB}
        ports:
            - '27017:27017'
        volumes:
            - mongodb:/data/db
        healthcheck:
            test: ['CMD', 'mongo', '--eval', 'db.adminCommand("ping")']
            interval: 10s
            timeout: 5s
            retries: 5

    # frontend:
    #     container_name: frontend
    #     image: frontend:latest
    #     build:
    #         context: ./frontend
    #         dockerfile: frontend.dockerfile
    #     ports:
    #         - '3000:3000'
    #     restart: always
    #     depends_on:
    #         backend:
    #             condition: service_healthy

    # backend:
    #     container_name: backend
    #     image: backend:latest
    #     build:
    #         context: ./backend
    #         dockerfile: backend.dockerfile
    #     ports:
    #         - '4000:4000'
    #     restart: unless-stopped
    #     depends_on:
    #         postgresdb:
    #             condition: service_healthy
    #     stdin_open: true
    #     tty: true

    adminer:
        container_name: adminer
        image: adminer:latest
        restart: always
        environment:
            - ADMINER_DESIGN=pepa-linha-dark
        ports:
            - '8080:8080'
        depends_on:
            postgresdb:
                condition: service_healthy
    cache:
        container_name: redis-server
        image: redis:latest
        restart: always
        command: redis-server
        ports:
            - 6379:6379
        volumes:
            - cache:/data

volumes:
    pgdata:
    mongodb:
    cache:
        driver: local
